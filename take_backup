#!/usr/bin/env bash

###  DEBUG          ###########################################################
set -u -e -o errtrace -o pipefail
trap "echo ""errexit: line $LINENO. Exit code: $?"" >&2" ERR
IFS=$'\n\t'

###  DESCRIPTION    ###########################################################
# backup $HOME, and /etc to a cloud provider  to be run as root
# Depends on `rclone`:
#   curl https://rclone.org/install.sh | sudo bash
###  VARIABLES      ###########################################################
source SHARED_VARS      # Generic variables shared across all scripts
source SHARED_FUNCTIONS # Generic functions shared across all scripts

###  VARIABLES      ###########################################################


_FULL_PATH="$(realpath "${0}")"
_FULL_FN=${_FULL_PATH##*/}
_FN=${_FULL_FN%.*}
_logfile="$_LOG_PATH/$_FN.log"

_SNPNM="$_HOSTNAME-$_DATE_STR.tar.gz" # snapshot name

###  FUNCTIONS      ###########################################################

_write_log() {
  # run a command $@, write it to a log matching the name of this script.
  "$@" >> "$_logfile"
}


function _hot_copy {
  rclone copy   -v "$_BACKUP_PATH"/ $_PRIMARY_CLOUD:$_BACKUP_PATH
  rclone delete -v --min-age 2d    "$_PRIMARY_CLOUD:$_BACKUP_PATH" --include "$_HOSTNAME"
}

function _cold_copy {
  rclone copy   -v "$_BACKUP_PATH"/ "$_SECONDARY_CLOUD:$_BACKUP_PATH"
  rclone delete -v --min-age 14d   "$_SECONDARY_CLOUD:$_BACKUP_PATH" --include "$_HOSTNAME"
}

function _clear_local {
  find $_BACKUP_PATH -iname "$(hostname)*" -mtime +1 -delete
}

function _backup {
  _hot_copy
  _cold_copy
  _clear_local
}


function _snapshot {
  tar cvzf  "$_BACKUP_PATH/$_SNPNM" \
    --exclude={"$_BACKUP_PATH","/storage","/bin","/boot","/dev","/lib","/lib32","/lib64"} \
    --exclude={"/libx32","lost+found","/media","/mnt","/opt","/proc","/usr"} \
    --exclude={"/root","/run","/sbin","/snap","srv","/sys","/tmp","/var"} \
    --exclude={"*ropbox*","Downloads",".cache",".mozilla",".vscode",".local"} \
    --exclude={"Trash","Cache*","gems","*otero","*git","*bsidian","plugged"} \
    --exclude={"Code",".npm","ale",".bundle"} /
}

_main() {
  _snapshot
  _backup
}

_main
